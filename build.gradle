/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// The outputs here are just plain .jar files for micro and nano. However, since nano contains
// (optional) features which depend on the Android SDK, we build with the Android SDK and package
// .jar files from the output classes.

import com.android.builder.BuilderConstants

apply plugin: 'android-library'

configurations {
    micro
    nano
}

android {
    compileSdkVersion 8
    buildToolsVersion = "19.0.3"

    productFlavors {
        micro {
            packageName "com.google.protobuf.micro"
        }
        nano {
            packageName "com.google.protobuf.nano"
        }
    }

    sourceSets {
        main.manifest.srcFile 'java/src/device/main/AndroidManifest.xml'

        micro {
            java {
                srcDirs = ['java/src/main/java/']
                include("com/google/protobuf/micro/*")
            }
        }

        nano {
            java {
                srcDirs = [
                    'java/src/main/java/',
                    'java/src/device/main/java/'
                ]
                include("com/google/protobuf/nano/**")
            }
        }
    }
}

// Generate jar libraries for each variant (nano, micro).
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(BuilderConstants.RELEASE)) {
        def productFlavor = getProductFlavor(variant)
        def task = project.tasks.create "${productFlavor.name}Jar", Jar
        task.from variant.javaCompile.destinationDir
        task.dependsOn variant.javaCompile
        task.baseName "libprotobuf"
        task.appendix "java"
        task.version "2.3"
        task.classifier productFlavor.name
        task.exclude("com/google/protobuf/BuildConfig*")
        artifacts.add(productFlavor.name, task);
    }
}

// until the plugin gives us this directly
def getProductFlavor(def variant) {
    String flavorName = variant.name[0..-(variant.buildType.name.length() + 1)]
    return android.productFlavors[flavorName]
}

